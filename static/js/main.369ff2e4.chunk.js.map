{"version":3,"sources":["components/Statistics/statistics.js","components/Container/container.js","components/Feedback/feedback.js","App.js","reportWebVitals.js","index.js","components/Feedback/feedback.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","defaultProps","Section","props","title","children","FeedbackOptions","options","onLeaveFeedback","className","style","item","map","el","type","name","onClick","list","App","state","handleCount","e","currentTarget","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","parseInt","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"4RAGA,SAASA,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,mCACGD,EAAQ,EACP,+BACE,6BACE,uCACQ,+BAAOH,SAGjB,6BACE,0CACW,+BAAOC,SAGpB,6BACE,sCACO,+BAAOC,SAGhB,wCACS,+BAAOC,OAEhB,oDACqB,iCAAOC,EAAP,cAIvB,0CAMRL,EAAWM,aAAe,CACxBL,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPC,mBAAoB,GAUPL,QClCEO,MAfjB,SAAiBC,GACb,IAAQC,EAAoBD,EAApBC,MAAOC,EAAaF,EAAbE,SACf,OACE,qCACE,6BAAKD,IACJC,M,gBCLM,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACI,oBAAIC,UAAWC,IAAMC,KAArB,SACGJ,EAAQK,KAAI,SAAAC,GAAE,OACb,6BACE,wBAAQC,KAAK,SAASC,KAAMF,EAAIG,QAASR,EAAkBC,UAAWC,IAAMO,KAA5E,SACGJ,KAFIA,Q,ICDbK,E,4MACJC,MAAQ,CACNvB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPsB,YAAc,SAAAC,GACZ,IAAMN,EAAOM,EAAEC,cAAcP,KAC7B,EAAKQ,UAAS,SAAAC,GAAS,sBACpBT,EAAOS,EAAUT,GAAQ,O,EAI9BU,mBAAqB,WACnB,MAA+B,EAAKN,MACpC,OADA,EAAQvB,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzB4B,gCAAkC,WAChC,IAAQ9B,EAAS,EAAKuB,MAAdvB,KACR,OAAO+B,SAAU/B,EAAO,EAAK6B,qBAAwB,M,4CAGvD,WACE,MAA+BG,KAAKT,MAA5BvB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,qCACE,cAAC,EAAD,CAASM,MAAM,wBAAf,SACE,cAACE,EAAD,CACEC,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAAiBoB,KAAKR,gBAG1B,cAAC,EAAD,CAAShB,MAAM,aAAf,SACE,cAAC,EAAD,CACER,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAO6B,KAAKH,qBACZzB,mBAAoB4B,KAAKF,6C,GAxCnBG,aAgDHX,IC1CAY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,KAAO,0B","file":"static/js/main.369ff2e4.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\n  return (\n    <>\n      {total > 0 ? (\n        <ul>\n          <li>\n            <p>\n              Good: <span>{good}</span>\n            </p>\n          </li>\n          <li>\n            <p>\n              Neutral: <span>{neutral}</span>\n            </p>\n          </li>\n          <li>\n            <p>\n              Bad: <span>{bad}</span>\n            </p>\n          </li>\n          <p>\n            Total: <span>{total}</span>\n          </p>\n          <p>\n            Positive Feedback: <span>{positivePercentage} %</span>\n          </p>\n        </ul>\n      ) : (\n        <p>No info</p>\n      )}\n    </>\n  );\n}\n\nStatistics.defaultProps = {\n  good: 0,\n  neutral: 0,\n  bad: 0,\n  total: 0,\n  positivePercentage: 0,\n};\nStatistics.propTypes = {\n  good: PropTypes.number,\n  neutral: PropTypes.number,\n  bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n\nexport default Statistics;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Section(props) {\n    const { title, children } = props;\n    return (\n      <>\n        <h2>{title}</h2>\n        {children}\n      </>\n    );\n  }\n  \n  Section.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.element.isRequired,\n  };\n  \n  export default Section;","import React from 'react';\nimport style from './feedback.module.css';\n\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\n  return (\n      <ul className={style.item}>\n        {options.map(el => (\n          <li key={el}>\n            <button type=\"button\" name={el} onClick={onLeaveFeedback}  className={style.list}>\n              {el}\n            </button>\n          </li>\n        ))}\n      </ul>\n  );\n}\n\n","import './App.css';\nimport React, { Component } from 'react';\nimport Statistics from './components/Statistics/statistics';\nimport Section from './components/Container/container';\nimport FeedbackOptions from './components/Feedback/feedback';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleCount = e => {\n    const name = e.currentTarget.name;\n    this.setState(prevState => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return parseInt((good / this.countTotalFeedback()) * 100);\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            onLeaveFeedback={this.handleCount}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        </Section>\n      </>\n    );\n  }\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"feedback_list__70ptW\"};"],"sourceRoot":""}